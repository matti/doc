#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo "TERM"
  exit 0
}
_int() {
  >&2 echo "
^C received"

  set +m
  set +e
  kill $(jobs -p) >/dev/null 2>&1
  wait $(jobs -p) >/dev/null 2>&1

  exit 0
}

_reload_int() {
  trap "_int" INT

  printf "\n\nreload\n"
  sleep 0.25
  trap "_reload_int" INT
}

trap "_term" TERM
trap "_int" INT
_err() {
  >&2 echo "🚫 : $*"
  exit 1
}

_usage() {
  echo """USAGE:
up
build
buildpush
pull
background|bg
ps
stop
stop:all
scale
services
services:except SERVICE1 SERVICE2
port
down
"""
}

project=$(basename "$(pwd)")

use_compose=0
case "${1:-}" in
  code)
    code "$BASH_SOURCE"
  ;;
  stop:all)
    docker ps -q | xargs docker stop -t 0
  ;;
  init)
    if [ -f docker-compose.yml ]; then
      _err "docker-compose.yml exists."
    fi

    if [ -f Dockerfile ]; then
      _err "Dockerfile exists."
    fi

    if [ -d app ]; then
      _err "app exists."
    fi

    echo """version: '3.6'

services:
  $project:
    build: .
    volumes:
      - ./app:/app""" > docker-compose.yml

    echo """FROM ubuntu:18.04

RUN apt-get update && apt-get install -yq --no-install-recommends \\
  nano curl wget inetutils-ping htop sudo

WORKDIR /app
COPY app .

ENTRYPOINT [\"/app/entrypoint.sh\"]""" > Dockerfile

    mkdir app

    echo """#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo \"TERM\"
  exit 0
}
trap \"_term\" TERM

_err() {
  >&2 echo \"err: \$*\"
  exit 1
}

echo \"started\"
tail -f /dev/null &
wait \$!""" > app/entrypoint.sh

    chmod +x app/entrypoint.sh
  ;;
  host:shell)
    screen $HOME/Library/Containers/com.docker.docker/Data/vms/0/tty
  ;;
  help)
    _usage
  ;;
  *)
    use_compose=1
  ;;
esac

[ "$use_compose" = "0" ] && exit 0

#----------------------------------------------------
use_services=0
case "${1:-}" in
  version)
    echo "1.11.1"
  ;;
  ps)
    docker-compose ps
  ;;
  scale)
    docker-compose up -d --scale "$2=$3"
  ;;
  tag)
    image=$($0 image $2)
    docker tag $image $3
  ;;
  *)
    use_services=1
  ;;
esac

[ "$use_services" = "0" ] && exit 0

#----------------------------------------------------
opts=""
args=""
for arg in ${@:2}; do
  case $arg in
    --)
      break
    ;;
    -*)
      opts="$opts $arg"
    ;;
    *)
      args="${args}${arg} "
    ;;
  esac
done

args_shell=""
for arg in ${@:3}; do
  case $arg in
    --)
      args_shell=""
      continue
    ;;
  esac

  args_shell="${args_shell}${arg} "
done

if [ -f "docker-compose.yml" ]; then
  docker_compose_json=$(yq r -j docker-compose.yml)
else
  docker_compose_json=""
fi


case $args in
  "")
    services=$(echo $docker_compose_json | jq -r '.services | keys[]' | xargs)
    first_service=$(printf $services)
  ;;
  *)
    services=$args
    first_service="${services%% *}"
  ;;
esac

case "${1:-}" in
  build)
    declare -A pids
    for service in $services; do
      image=$(doc image $service)
      [ "$image" = "" ] && continue

      (
        echo "pull"
        $0 pull $service
        echo "🐳 building $image"
        cache_froms=$($0 cache_from $service)
        if [ "$cache_froms" != "" ]; then
          echo "using cache_froms:"
          for cache_from in $cache_froms; do
            echo $cache_from
          done
        fi

        docker-compose --no-ansi build $service
        echo "🐳 built $image"
      ) 2>&1 | sed -le "s#^#build $service: #;" &
      pids["$service"]=$!
    done

    for service in "${!pids[@]}"
    do
      pid=${pids["$service"]}
      if ! wait $pid; then
        echo "Building of $service failed"
        exit 1
      fi
    done
  ;;
  push)
    declare -A pids

    for service in $services; do
      image=$($0 image $service)
      if [ "$image" = "" ]; then
        echo "not tagged, not pushing"
        break
      fi
      (
        echo "🐳 pushing $image"
        docker push "$image"
        echo "🐳 pushed $image"
      ) 2>&1 | sed -le "s#^#push $image: #;" &
      pids["$service"]=$!
    done

    for service in "${!pids[@]}"
    do
      pid=${pids["$service"]}
      if ! wait $pid; then
        _err "🚫 pushing of $service failed"
      fi
    done
  ;;
  buildpush|bp)
    for service in $services; do
      (
        $0 build "$service"
        $0 push "$service"
      ) 2>&1 | sed -le "s#^#buildpush $service: #;" &
    done

    wait $(jobs -p)
  ;;
  cache_from)
    for service in $services; do
      build_key_type=$(echo $docker_compose_json | jq -r ".services | .[\"${service}\"]? | .build[]? | type" | xargs)

      if [ "$build_key_type" != "array string" ]; then
        continue
      fi

      cache_froms_with_interpolations=$(echo $docker_compose_json | jq -r ".services | .[\"${service}\"]? | .build | .cache_from[]")
      set +u
        cache_froms=$(eval echo $cache_froms_with_interpolations)
      set -u
      for cache_from in $cache_froms; do
        tag="${cache_from#*:}"
        if [ "$tag" != "" ]; then
          echo $cache_from
        fi
      done
    done
  ;;
  image)
    for service in $services; do
      image_with_interpolations=$(echo $docker_compose_json | jq -r ".services | .[\"${service}\"]? | .image?" | xargs)
      [ "$image_with_interpolations" = "null" ] && continue

      image=$(eval echo $image_with_interpolations)
      [ "$image" != "" ] && echo "$image"
    done
  ;;
  pull)
    _pull() {
      [ "${1:-}" = "" ] && return

      if [ "$(docker images -q $1)" = "" ]; then
        echo "🐳 pulling $1"
        while true; do
          2>&1 docker pull $1 | tee /dev/stderr | grep "ERROR: gcloud crashed (OperationalError): database is locked" || break
          sleep 1
        done
        if [ "$(docker images -q $1)" = "" ]; then
          echo "🚫 error while pulling $1"
        fi
      else
        echo "🆗 already exists $1"
      fi
    }

    for service in $services; do
      (
        image=$($0 image $service)
        (
          _pull $image
        ) 2>&1 | sed -le "s#^#pull image $image: #;"

        image_in_daemon=$(docker images -q $image)

        # only pull cache-froms unless image tag is found
        if [ "$image_in_daemon" = "" ]; then
          cache_froms=$($0 cache_from $service)
          for cache_from in $cache_froms; do
            [ "$cache_from" = "$image" ] && continue

            # Pull one by one to re-use layers
            (
              _pull $cache_from
            ) 2>&1 | sed -le "s#^#pull cache_from $cache_from: #;"
          done
        fi
      ) 2>&1 | sed -le "s#^#$service: #;" &
    done

    wait $(jobs -p)
  ;;
  services:except)
    services_all=$(docker-compose config --services)

    services_wanted=""
    for service in $services_all; do
      unwanted=false
      for unwanted_service in ${@:2}; do
        [ "$service" = "$unwanted_service" ] && unwanted=true
      done
      [ "$unwanted" = true ] && continue

      services_wanted="$services_wanted $service"
    done

    echo $services_wanted
  ;;
  up:without|run:without)
    services_wanted=$($0 services:except ${@:2})

    echo $0 $1 $services_wanted
  ;;
  ""|up)
    trap "_reload_int" INT

    while true; do
      $0 build "$services"
      (
        docker-compose up -t 0 --force-recreate $services || true
      ) &
      wait $! || true
    done
  ;;
  run)
    trap "_reload_int" INT
    while true; do
      docker-compose up -t 0 --force-recreate $services || true
    done
  ;;
  background|bg)
    $0 build "$services"
    docker-compose up -d --force-recreate $services
  ;;
  background:ensure|bg:ensure)
    docker-compose up -d $services
  ;;
  kill)
    docker-compose kill $opts $services
  ;;
  stop)
    docker-compose stop $opts --timeout 0 $services
  ;;
  rm)
    docker-compose rm $opts -f $services
  ;;
  logs|tail|logs:tail)
    docker-compose logs $opts $services
  ;;
  shell|sh)
    if [ "${args_shell}" = "" ]; then
      cmd="exec bash; exec sh"
    else
      cmd="exec bash -c '${args_shell}'; exec sh -c '${args_shell}'"
    fi

    docker-compose exec $opts "$first_service" "sh" "-c" "command -v bash >/dev/null && $cmd"
  ;;
  shell:root|sh:root)
    docker-compose exec $opts --privileged --user 0 "$2" "bash || sh || ash || dash || zsh"
  ;;
  restart)
    docker-compose restart $opts -t0 $services
  ;;
  attach)
    container=$(docker-compose ps -q "$first_service")
    docker attach "$container"
  ;;
  port)
    docker-compose port $opts "$2" "$3"
  ;;
  services)
    echo "$services"
  ;;
  stats)
    containers=$(docker-compose ps -q)
    docker stats --no-stream $containers
  ;;
  down)
    # ERROR: error while removing network: .. has active endpoints
    while true; do
      docker-compose down $opts -v -t 0 && break
      sleep 1
    done
    echo "done"
  ;;
  *)
    _usage
  ;;
esac
