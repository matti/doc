#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo "TERM"
  exit 0
}
_int() {
  >&2 echo "
^C received"
  set +e
    kill $(jobs -p)
    wait $(jobs -p)
  set -e

  exit 0
}

trap "_term" TERM
trap "_int" INT
_err() {
  >&2 echo "err: $*"
  exit 1
}

_usage() {
  _err """USAGE:
up
build
buildpush
pull
background|bg
ps
stop
scale
port
"""
}

project=$(basename "$(pwd)")

use_compose=0
case "${1:-}" in
  init)
    if [ -f docker-compose.yml ]; then
      _err "docker-compose.yml exists."
    fi

    if [ -f Dockerfile ]; then
      _err "Dockerfile exists."
    fi

    if [ -d app ]; then
      _err "app exists."
    fi

    echo """version: '3.6'

services:
  $project:
    build: .
    volumes:
      - ./app:/app""" > docker-compose.yml

    echo """FROM ubuntu:18.04

RUN apt-get update && apt-get install -yq --no-install-recommends \\
  nano curl wget inetutils-ping htop sudo

WORKDIR /app
COPY app .

ENTRYPOINT [\"/app/entrypoint.sh\"]""" > Dockerfile

    mkdir app

    echo """#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo \"TERM\"
  exit 0
}
trap \"_term\" TERM

_err() {
  >&2 echo \"err: \$*\"
  exit 1
}

echo \"started\"
tail -f /dev/null &
wait \$!""" > app/entrypoint.sh

    chmod +x app/entrypoint.sh
  ;;
  host:shell)
    screen $HOME/Library/Containers/com.docker.docker/Data/vms/0/tty
  ;;
  help)
    _usage
  ;;
  *)
    use_compose=1
  ;;
esac

[ "$use_compose" = "0" ] && exit 0

#----------------------------------------------------
use_services=0
case "${1:-}" in
  ps)
    docker-compose ps
  ;;
  scale)
    docker-compose up -d --scale "$2=$3"
  ;;
  *)
    use_services=1
  ;;
esac

[ "$use_services" = "0" ] && exit 0

#----------------------------------------------------
if [ "${2:-}" = "" ]; then
  services=$(docker-compose config --services)
else
  services=${*:2}
fi

services_line=$(echo $services)

case "${1:-}" in
  build)
    for service in $services; do
      (
        docker-compose build $service
      ) 2>&1 | sed -le "s#^#build $service: #;" &
    done

    wait $(jobs -p)
  ;;
  push)
    for service in $services; do
      (
        while true; do
          docker-compose build "$service" 2>&1 | grep "uses an image, skipping" && break

          docker push "$(docker-compose build "$service" | grep "Successfully tagged" | cut -d' ' -f3-)" && break
          sleep 1
        done
      ) 2>&1 | sed -le "s#^#push $service: #;" &
    done

    wait $(jobs -p)
  ;;
  buildpush|bp)
    for service in $services; do
      (
        $0 build "$service"
        $0 push "$service"
      ) 2>&1 | sed -le "s#^#buildpush $service: #;" &
    done

    wait $(jobs -p)
  ;;
  pull)
    for service in $services; do
      (
        docker-compose pull "$service"
      ) 2>&1 | sed -le "s#^#pull $service: #;" &
    done

    wait $(jobs -p)
  ;;
  ""|up)
    _up_int() {
      echo "reload"
    }

    trap "_up_int" INT
    while true; do
      $0 build "$services_line"
      docker-compose up --force-recreate $services_line || true
      sleep 0.1
    done
  ;;
  background|bg)
    $0 build "$services_line"
    docker-compose up -d --force-recreate $services_line
  ;;
  kill)
    docker-compose kill $services_line
  ;;
  stop)
    docker-compose stop --timeout 0 $services_line
  ;;
  rm)
    docker-compose rm -f $services_line
  ;;
  logs)
    docker-compose logs --tail=10 $services_line
  ;;
  tail|logs:tail)
    docker-compose logs -f --tail=10 $services_line
  ;;
  shell|sh)
    if [ "${3:-}" = "" ]; then
      docker-compose exec "$2" "sh" "-c" "command -v bash >/dev/null && exec bash; exec sh"
    else
      docker-compose exec "$2" "sh" "-c" "command -v bash >/dev/null && exec bash -c ${*:3}; exec sh -c ${*:3}"
    fi
  ;;
  shell:root|sh:root)
    docker-compose exec --privileged --user 0 "$2" "bash || sh || ash || dash || zsh"
  ;;
  attach)
    container=$(docker-compose ps -q "$2")
    docker attach "$container"
  ;;
  port)
    if [ "${4:-}" = "" ]; then
      index=1
    else
      index=$4
    fi

    docker-compose port "--index=$index" "$2" "$3"
  ;;
  services)
    echo "$services"
  ;;
  stats)
    for service in $services; do
      (
        container=$(docker-compose ps -q $service)
        docker stats --no-stream $container
      ) 2>&1 | sed -le "s#^#stats $service: #;"
      echo ""
    done
  ;;
  *)
    _usage
  ;;
esac
