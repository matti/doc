#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo "TERM"
  exit 0
}
_int() {
  >&2 echo "
^C received"

  set +m
  set +e
  kill $(jobs -p) >/dev/null 2>&1
  wait $(jobs -p) >/dev/null 2>&1

  exit 0
}

_reload_int() {
  trap "_int" INT

  printf "\n\nreload\n"
  sleep 0.25
  trap "_reload_int" INT
}

trap "_term" TERM
trap "_int" INT
_err() {
  >&2 echo "err: $*"
  exit 1
}

_usage() {
  _err """USAGE:
up
build
buildpush
pull
background|bg
ps
stop
stop:all
scale
port
down
"""
}

project=$(basename "$(pwd)")

use_compose=0
case "${1:-}" in
  code)
    code "$BASH_SOURCE"
  ;;
  stop:all)
    docker ps -q | xargs docker stop -t 0
  ;;
  init)
    if [ -f docker-compose.yml ]; then
      _err "docker-compose.yml exists."
    fi

    if [ -f Dockerfile ]; then
      _err "Dockerfile exists."
    fi

    if [ -d app ]; then
      _err "app exists."
    fi

    echo """version: '3.6'

services:
  $project:
    build: .
    volumes:
      - ./app:/app""" > docker-compose.yml

    echo """FROM ubuntu:18.04

RUN apt-get update && apt-get install -yq --no-install-recommends \\
  nano curl wget inetutils-ping htop sudo

WORKDIR /app
COPY app .

ENTRYPOINT [\"/app/entrypoint.sh\"]""" > Dockerfile

    mkdir app

    echo """#!/usr/bin/env bash
set -euo pipefail

_term() {
  >&2 echo \"TERM\"
  exit 0
}
trap \"_term\" TERM

_err() {
  >&2 echo \"err: \$*\"
  exit 1
}

echo \"started\"
tail -f /dev/null &
wait \$!""" > app/entrypoint.sh

    chmod +x app/entrypoint.sh
  ;;
  host:shell)
    screen $HOME/Library/Containers/com.docker.docker/Data/vms/0/tty
  ;;
  help)
    _usage
  ;;
  *)
    use_compose=1
  ;;
esac

[ "$use_compose" = "0" ] && exit 0

#----------------------------------------------------
use_services=0
case "${1:-}" in
  version)
    echo "1.6.0"
  ;;
  ps)
    docker-compose ps
  ;;
  scale)
    docker-compose up -d --scale "$2=$3"
  ;;
  *)
    use_services=1
  ;;
esac

[ "$use_services" = "0" ] && exit 0

#----------------------------------------------------
opts=""
args=""
for arg in ${@:2}; do
  case $arg in
    --)
      break
    ;;
    -*)
      opts="$opts $arg"
    ;;
    *)
      args="${args}${arg} "
    ;;
  esac
done

args_shell=""
for arg in ${@:3}; do
  case $arg in
    --)
      args_shell=""
      continue
    ;;
  esac

  args_shell="${args_shell}${arg} "
done

case $args in
  "")
    services=$(docker-compose config --services)
    services_line=$(echo $services)
    first_service="${services_line%% *}"
  ;;
  *)
    services=$args
    services_line=$args
    first_service="${services_line%% *}"
  ;;
esac

case "${1:-}" in
  build)
    declare -A pids
    for service in $services; do
      (
        while true; do
          set +e
            # 2>&1 redir is needed because "uses an image, skipping" goes to stderr
            2>&1 docker-compose build $opts --compress "$service" | tee /dev/stderr | grep "uses an image, skipping\|Successfully tagged" && break
          set -e

          echo "build retry"
          sleep 1
        done
      ) >&1 | sed -le "s#^#build $service: #;" &
      pids["$service"]=$!
    done

    for service in "${!pids[@]}"
    do
      pid=${pids["$service"]}
      if ! wait $pid; then
        echo "Building of $service failed"
        exit 1
      fi
    done
  ;;
  push)
    declare -A pids

    for service in $services; do
      (
        while true; do
          # the only way to get image nicely
          # set +e required if no image is tagged
          set +e
            image="$(2>&1 docker-compose build --compress "$service" | grep "Successfully tagged" | cut -d' ' -f3-)"
          set -e

          if [ "$image" = "" ]; then
            echo "not tagged, not pushing"
            break
          fi

          docker push "$image" && break
          sleep 1
        done
      ) 2>&1 | sed -le "s#^#push $service: #;" &
      pids["$service"]=$!
    done

    for service in "${!pids[@]}"
    do
      pid=${pids["$service"]}
      if ! wait $pid; then
        echo "Pushing of $service failed"
      fi
    done
  ;;
  buildpush|bp)
    for service in $services; do
      (
        $0 build "$service"
        $0 push "$service"
      ) 2>&1 | sed -le "s#^#buildpush $service: #;" &
    done

    wait $(jobs -p)
  ;;
  pull)
    for service in $services; do
      (
        docker-compose pull $opts "$service"
      ) 2>&1 | sed -le "s#^#pull $service: #;" &
    done

    wait $(jobs -p)
  ;;
  services:except)
    services_all=$(docker-compose config --services)

    services_wanted=""
    for service in $services_all; do
      unwanted=false
      for unwanted_service in ${@:2}; do
        [ "$service" = "$unwanted_service" ] && unwanted=true
      done
      [ "$unwanted" = true ] && continue

      services_wanted="$services_wanted $service"
    done

    echo $services_wanted
  ;;
  up:without|run:without)
    services_wanted=$($0 services:except ${@:2})

    echo $0 $1 $services_wanted
  ;;
  ""|up)
    trap "_reload_int" INT

    while true; do
      $0 build "$services_line"
      (
        docker-compose up -t 0 --force-recreate $services_line || true
      ) &
      wait $! || true
    done
  ;;
  run)
    trap "_reload_int" INT
    while true; do
      docker-compose up -t 0 --force-recreate $services_line || true
    done
  ;;
  background|bg)
    $0 build "$services_line"
    docker-compose up -d --force-recreate $services_line
  ;;
  background:ensure|bg:ensure)
    docker-compose up -d $services_line
  ;;
  kill)
    docker-compose kill $opts $services_line
  ;;
  stop)
    docker-compose stop $opts --timeout 0 $services_line
  ;;
  rm)
    docker-compose rm $opts -f $services_line
  ;;
  logs|tail|logs:tail)
    docker-compose logs $opts $services_line
  ;;
  shell|sh)
    if [ "${args_shell}" = "" ]; then
      cmd="exec bash; exec sh"
    else
      cmd="exec bash -c '${args_shell}'; exec sh -c '${args_shell}'"
    fi

    docker-compose exec $opts "$first_service" "sh" "-c" "command -v bash >/dev/null && $cmd"
  ;;
  shell:root|sh:root)
    docker-compose exec $opts --privileged --user 0 "$2" "bash || sh || ash || dash || zsh"
  ;;
  restart)
    docker-compose restart $opts -t0 $services_line
  ;;
  attach)
    container=$(docker-compose ps -q "$first_service")
    docker attach "$container"
  ;;
  port)
    docker-compose port $opts "$2" "$3"
  ;;
  services)
    echo "$services"
  ;;
  stats)
    containers=$(docker-compose ps -q)
    docker stats --no-stream $containers
  ;;
  down)
    # ERROR: error while removing network: .. has active endpoints
    while true; do
      docker-compose down $opts -v -t 0 && break
      sleep 1
    done
    echo "done"
  ;;
  *)
    _usage
  ;;
esac
